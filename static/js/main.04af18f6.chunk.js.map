{"version":3,"sources":["components/side-nav.jsx","components/page-title.jsx","components/home.jsx","components/notfound.jsx","components/cookie.jsx","components/alert.jsx","components/hover.jsx","components/order.jsx","components/swipe.jsx","components/slider.jsx","components/stale.jsx","components/interceptor.jsx","components/welcome.jsx","components/wait.jsx","components/modalPopup.jsx","components/page-description.jsx","components/login.jsx","components/registration.jsx","App.js","serviceWorker.js","index.js"],"names":["SideNav","className","Navbar","Brand","href","target","Nav","Link","React","Component","PageTitle","props","state","title","page_title","Container","Row","Col","this","Home","NotFound","Cookie","randomString","text","possible","i","charAt","Math","floor","random","length","setCookie","cookieValue","expirationDays","d","Date","setTime","getTime","expires","toUTCString","v","cname","console","log","document","cookie","setState","getCookieValue","name","ca","split","c","substring","indexOf","Button","variant","id","onClick","update","Alert","window","alert","confirm","prompt","showAlert","showConfirm","showPrompt","Hover","clicked","e","action","map","animal","index","key","Order","data","push","that","dragProps","onDragEnd","fromIndex","toIndex","item","splice","nodeSelector","handleSelector","Swipe","left","right","sm","swipeLeft","content","swipeRight","onSwipeProgress","progress","info","Slider","sliderValue","Form","Group","as","xs","value","onChange","Number","Control","Stale","count","staleBtn","createButton","createElement","type","ref","createRef","handleClick","forceUpdate","render","Interceptor","Welcome","Wait","calculateTheAnswer","theAnswer","aWhile","setTimeout","showAnswer","ModalPopup","handleClose","showModal","handleOpen","Modal","show","onHide","Header","closeButton","Title","Body","Footer","PageDescription","desc","page_description","Login","schema","yup","username","required","password","validationSchema","initialValues","onSubmit","handleSubmit","handleChange","handleBlur","values","touched","errors","noValidate","Label","column","lg","htmlFor","InputGroup","Prepend","Text","FormControl","placeholder","onBlur","isInvalid","Feedback","Registration","startDate","date","trim","min","max","notOneOf","confirmPassword","oneOf","firstName","lastName","email","terms","isValid","muted","Check","inline","label","selected","custom","feedback","App","fluid","basename","exact","path","component","Notfound","Boolean","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.04af18f6.chunk.js","sourcesContent":["import React from 'react'\nimport { Navbar, Nav } from 'react-bootstrap';\nimport { FaGithub } from 'react-icons/fa';\n\nexport default class SideNav extends React.Component {\n  render() {\n    return (\n      <div className=\"sidebar\">\n        <Navbar.Brand href=\"https://github.com/adimoldovan/web-stubs\" target=\"_blank\"><FaGithub /></Navbar.Brand>\n        <Nav.Link href=\"#/login\">Login</Nav.Link>\n        <Nav.Link href=\"#/registration\">Registration</Nav.Link>\n        <Nav.Link href=\"#/alert\">Alerts</Nav.Link>\n        <Nav.Link href=\"#/cookie\">Cookie</Nav.Link>\n        <Nav.Link href=\"#/hover\">Hover</Nav.Link>\n        <Nav.Link href=\"#/wait\">The answer (Wait)</Nav.Link>\n        <Nav.Link href=\"#/order\">Order (Drag)</Nav.Link>\n        <Nav.Link href=\"#/swipe\">Swipe (Drag)</Nav.Link>\n        <Nav.Link href=\"#/slider\">Slider (Drag)</Nav.Link>\n        <Nav.Link href=\"#/stale\">Stale element</Nav.Link>\n        <Nav.Link href=\"#/interceptor\">Click intercepted</Nav.Link>\n        <Nav.Link href=\"#/modal\">Modal</Nav.Link>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport {Col, Container, Row} from 'react-bootstrap';\n\nexport default class PageTitle extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            title: props.page_title\n        };\n    }\n\n    render() {\n        return (\n            <Container>\n                <Row>\n                    <Col>\n                        <h1>\n                            <small className=\"text-muted\">{this.state.title}</small>\n                        </h1>\n                        <hr/>\n                    </Col>\n                </Row>\n            </Container>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport { Container } from 'react-bootstrap';\nimport PageTitle from './page-title'\n\nexport default class Home extends Component {\n    render() {\n        return (\n          <Container>\n            <PageTitle page_title=\"Home\" />\n          </Container>\n        )\n      }\n}","import React from 'react'\nimport PageTitle from './page-title';\nimport { Container } from 'react-bootstrap';\n\nexport default class NotFound extends React.Component {\n  render() {\n    return (\n      <Container>\n        <PageTitle page_title=\"Whoops! Content not found!\" />\n      </Container>\n    )\n  }\n}\n","import React, {Component} from 'react';\nimport {Button, Col, Container, Row} from 'react-bootstrap';\nimport PageTitle from './page-title';\n\nexport default class Cookie extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {cookieValue: \"\"};\n        this.cname = \"gibberish\";\n    }\n\n    randomString = () => {\n        let text = \"\";\n        const possible = \"abcdefghijklmnopqrstuvwxyz 0123456789\";\n\n        for (let i = 0; i < 8; i++)\n            text += possible.charAt(Math.floor(Math.random() * possible.length));\n        return text;\n    }\n\n    setCookie = (cookieValue, expirationDays) => {\n        let d = new Date();\n        d.setTime(d.getTime() + (expirationDays * 24 * 60 * 60 * 1000));\n        let expires = \"expires=\" + d.toUTCString();\n        let v = this.cname + \"=\" + cookieValue + \"; \" + expires;\n        console.log(\"Setting cookie \" + v)\n        document.cookie = v;\n\n        this.setState({\n            cookieValue: this.getCookieValue()\n        })\n    }\n\n    getCookieValue = () => {\n        let name = this.cname + \"=\";\n        let ca = document.cookie.split(';');\n        for (let i = 0; i < ca.length; i++) {\n            let c = ca[i];\n            while (c.charAt(0) === ' ') {\n                c = c.substring(1);\n            }\n            if (c.indexOf(name) === 0) {\n                return c.substring(name.length, c.length);\n            }\n        }\n        return \"\";\n    }\n\n    update(setCookie) {\n        if (setCookie) {\n            this.setCookie(this.randomString(), 5)\n        } else {\n            this.setCookie(\"\", -1)\n        }\n    }\n\n    render() {\n        return (\n            <Container>\n                <PageTitle page_title=\"The gibberish talking cookie\"/>\n                <Container>\n                    <Row>\n                        <Col className=\"text-center\">\n                            <div>\n                                <Button variant=\"success\" className=\"alert-button\" id=\"set-cookie\"\n                                        onClick={() => this.update(true)}>Set the cookie</Button>\n                                <Button variant=\"danger\" className=\"alert-button\" id=\"delete-cookie\"\n                                        onClick={() => this.update(false)}>Remove the cookie</Button>\n                            </div>\n                            <div>\n                                <h1 id=\"cookie-value\">{this.state.cookieValue}</h1>\n                            </div>\n                        </Col>\n                    </Row>\n                </Container>\n            </Container>\n        )\n    }\n}","import React, { Component } from 'react';\nimport { Container, Button, Row, Col } from 'react-bootstrap';\nimport PageTitle from './page-title'\n\nexport default class Alert extends Component {\n\n  showAlert() {\n    window.alert('Hello! I am an Javascript alert!\\nYou cannot interact with the page unless you dismiss me');\n  }\n\n  showConfirm() {\n    window.confirm('Hello! I am an Javascript confirmation dialog!\\nYou cannot interact with the page unless you dismiss me');\n  }\n\n  showPrompt() {\n    window.prompt('Hello! I am an Javascript prompt dialog!\\nYou cannot interact with the page unless you dismiss me');\n  }\n\n  render() {\n    return (\n      <div>\n        <PageTitle page_title=\"Alert\" />\n        <Container>\n          <Row>\n            <Col className=\"text-center\">\n              <Button variant=\"info\" className=\"alert-button\" id=\"alert-trigger\" onClick={this.showAlert}>Open alert</Button>\n              <Button variant=\"info\" className=\"alert-button\" id=\"confirm-trigger\" onClick={this.showConfirm}>Open confirmation dialog</Button>\n              <Button variant=\"info\" className=\"alert-button\" id=\"prompt-trigger\" onClick={this.showPrompt}>Open prompt dialog</Button>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    )\n  }\n}","import React, {Component} from 'react';\nimport {Button, Container} from 'react-bootstrap';\nimport PageTitle from './page-title'\nimport './hover.css'\n\nexport default class Hover extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            action: \"\",\n        };\n    }\n\n    clicked = (e) => {\n        this.setState({action: `You last clicked the ${e.target.id}`});\n    }\n\n    render() {\n        const animals = [\"Dog\", \"Bird\", \"Cat\", \"Mouse\", \"Horse\"];\n\n        return (\n            <Container>\n                <PageTitle page_title=\"Hover\"/>\n                <Container className=\"container-table text-center\">\n                    <p id=\"result\">{this.state.action}</p>\n                    <div className=\"dropdown\">\n                        <Button variant=\"outline-info\">Hover me</Button>\n                        <div className=\"dropdown-content\">\n                            {animals.map((animal, index) => (\n                                <div key={index} className=\"clickable\" id={animal} onClick={this.clicked}>{animal}</div>\n                            ))}\n                        </div>\n                    </div>\n                </Container>\n            </Container>\n        )\n    }\n}","import React, {Component} from 'react';\nimport {Container} from 'react-bootstrap';\nimport PageTitle from './page-title'\nimport ReactDragListView from 'react-drag-listview/lib/index.js';\nimport './order.css';\nimport {FaArrowsAlt} from \"react-icons/all\";\n\nexport default class Order extends Component {\n    constructor(props) {\n        super(props);\n        const data = [];\n        for (let i = 1, len = 21; i < len; i += 1) {\n            data.push({\n                title: `Item ${i}`\n            });\n        }\n        this.state = {\n            data\n        };\n    }\n\n    render() {\n        const that = this;\n        const dragProps = {\n            onDragEnd(fromIndex, toIndex) {\n                const data = [...that.state.data];\n                const item = data.splice(fromIndex, 1)[0];\n                data.splice(toIndex, 0, item);\n                that.setState({data});\n            },\n            nodeSelector: 'li',\n            handleSelector: 'button'\n        };\n\n        return (\n            <Container>\n                <PageTitle page_title=\"Order\"/>\n                <div className=\"draggable-list\">\n                    <ReactDragListView {...dragProps}>\n                        <ol>\n                            {this.state.data.map((item, index) => (\n                                <li key={index}>\n                                    {item.title}\n                                    <button id={`move-item-${index}`} ><FaArrowsAlt/></button>\n                                </li>\n                            ))}\n                        </ol>\n                    </ReactDragListView>\n                </div>\n            </Container>\n        )\n    }\n}","import React, {Component} from 'react';\nimport {Container} from 'react-bootstrap';\nimport PageTitle from './page-title'\nimport {SwipeableList, SwipeableListItem} from '@sandstreamdev/react-swipeable-list';\nimport '@sandstreamdev/react-swipeable-list/dist/styles.css';\nimport {FaThumbsDown, FaThumbsUp} from \"react-icons/all\";\nimport './swipe.css'\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nexport default class Swipe extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            left: 0,\n            right: 0,\n        };\n    }\n\n\n    render() {\n        return (\n            <Container>\n                <PageTitle page_title=\"Swipe\"/>\n                <div className=\"swipe-list-container\">\n                    <SwipeableList>\n                        <Row>\n                            <Col sm className=\"counter\">{this.state.left}</Col>\n                            <Col sm><SwipeableListItem\n                                swipeLeft={{\n                                    content: <div className=\"swipe-list-item-left\"><FaThumbsDown\n                                        className=\"swipe-list-content-icon\"/></div>,\n                                    action: () => this.setState({left: this.state.left + 1})\n                                }}\n                                swipeRight={{\n                                    content: <div className=\"swipe-list-item-right\"><FaThumbsUp\n                                        className=\"swipe-list-content-icon\"/></div>,\n                                    action: () => this.setState({right: this.state.right + 1})\n                                }}\n                                onSwipeProgress={progress => console.info(`Swipe progress: ${progress}%`)}\n                            >\n                                <div className=\"swipe-list-item\">Swipe me left or right</div>\n                            </SwipeableListItem></Col>\n                            <Col sm className=\"counter\">{this.state.right}</Col>\n\n                        </Row>\n                    </SwipeableList>\n                </div>\n            </Container>\n        )\n    }\n}","import React, {Component} from 'react';\nimport {Container} from 'react-bootstrap';\nimport PageTitle from './page-title'\nimport 'react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css';\nimport RangeSlider from 'react-bootstrap-range-slider';\nimport Form from \"react-bootstrap/Form\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\n\nexport default class Slider extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            sliderValue: 25,\n        };\n    }\n\n    render() {\n        return (\n            <Container>\n                <PageTitle page_title=\"Slider\"/>\n                <Form>\n                    <Form.Group as={Row}>\n                        <Col xs=\"9\">\n                            <RangeSlider\n                                value={this.state.sliderValue}\n                                onChange={e => this.setState({sliderValue: (Number(e.target.value))})}\n                            />\n                        </Col>\n                        <Col xs=\"3\">\n                            <Form.Control value={this.state.sliderValue} onChange={e => this.setState({sliderValue: (Number(e.target.value))})}/>\n                        </Col>\n                    </Form.Group>\n                </Form>\n            </Container>\n        )\n    }\n}","import React, {Component} from 'react';\nimport {Container} from 'react-bootstrap';\nimport PageTitle from './page-title'\n\nexport default class Stale extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            count: 0\n        };\n        this.staleBtn = this.createButton();\n    }\n\n    createButton() {\n        return React.createElement('button', {\n            id: \"stale-button\",\n            className: \"btn btn-info\",\n            type: \"button\",\n            name: \"button_\" + this.state.count,\n            ref: React.createRef(),\n            onClick: () => {\n                this.handleClick();\n            }\n        }, this.state.count + \" clicks\")\n    }\n\n    handleClick() {\n        let count = this.state.count;\n        this.setState({count: ++count});\n        this.staleBtn = this.createButton();\n        this.forceUpdate();\n        this.render();\n    }\n\n    render() {\n        return (\n            <Container>\n                <PageTitle page_title=\"Stale element (work in progress)\"/>\n                <div id=\"stale-container\" className=\"text-center\">\n                    {this.staleBtn}\n                </div>\n            </Container>\n        )\n    }\n}","import React, {Component} from 'react';\nimport {Container} from 'react-bootstrap';\nimport PageTitle from './page-title'\nimport './interceptor.css'\n\nexport default class Interceptor extends Component {\n    render() {\n        return (\n            <Container>\n                <PageTitle page_title=\"Click intercepted\"/>\n                <div className=\"interceptor-content\">\n                    <label>\n                        <input type=\"checkbox\" id=\"the_checkbox\"/>\n                        <span className=\"off\">A checkbox waiting to be checked</span>\n                    </label>\n                </div>\n            </Container>\n        )\n    }\n}","import React, { Component } from 'react';\nimport { Container } from 'react-bootstrap';\nimport PageTitle from './page-title'\n\nexport default class Welcome extends Component {\n    render() {\n        return (\n          <Container>\n            <PageTitle page_title=\"Welcome\" />\n          </Container>\n        )\n      }\n}","import React, {Component} from 'react';\nimport {Button, Col, Container, Row} from 'react-bootstrap';\nimport PageTitle from './page-title'\n\nexport default class Wait extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            theAnswer: \"\",\n        };\n    }\n\n    calculateTheAnswer = () => {\n        this.setState({theAnswer: \"Calculating...\"})\n        let aWhile = Math.floor(Math.random() * 9000) + 3000;\n        setTimeout(this.showAnswer, aWhile)\n    }\n\n    showAnswer = () => {\n        this.setState({theAnswer: \"42\"})\n    }\n\n    render() {\n        return (\n            <div>\n                <PageTitle page_title=\"Wait\"/>\n                <Container>\n                    <Row className=\"text-center the-answer\">\n                        <Col className=\"text-center\">\n                            {this.state.theAnswer}\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col className=\"text-center\">\n                            <Button variant=\"danger\" className=\"alert-button\" id=\"answer-trigger\"\n                                    onClick={this.calculateTheAnswer}>Give me the Answer to the Ultimate Question of\n                                Life, the\n                                Universe, and Everything</Button>\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        )\n    }\n}","import React, {Component} from 'react';\nimport {Container} from 'react-bootstrap';\nimport PageTitle from './page-title'\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\n\nexport default class ModalPopup extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showModal: false,\n        };\n    }\n\n    handleClose = () => {\n        this.setState({showModal: false})\n    }\n    handleOpen = () => {\n        this.setState({showModal: true})\n    }\n\n    render() {\n        return (\n            <Container>\n                <PageTitle page_title=\"Modal\"/>\n                <Container className=\"container-table text-center\">\n                    <Button variant=\"primary\" onClick={this.handleOpen}>\n                        Launch modal\n                    </Button>\n                </Container>\n                <Modal show={this.state.showModal} onHide={this.handleClose}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Click interceptor</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>I'm stealing the click action for any element that's under me</Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={this.handleClose}>\n                            Close\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </Container>\n        )\n    }\n}","import React from 'react'\nimport {Col, Container, Row} from 'react-bootstrap';\n\nexport default class PageDescription extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            desc: props.page_description\n        };\n    }\n\n    render() {\n        return (\n            <Container>\n                <Row>\n                    <Col>\n                        <small className=\"text-muted\">{this.state.desc}</small>\n                        <hr/>\n                    </Col>\n                </Row>\n            </Container>\n        )\n    }\n}\n","import React, {Component} from 'react';\nimport {Button, Col, Container, Form, FormControl, InputGroup, Row} from 'react-bootstrap';\nimport PageTitle from './page-title'\nimport {FaKey, FaSignInAlt, FaUser} from \"react-icons/all\";\nimport PageDescription from \"./page-description\";\nimport {Formik} from 'formik';\nimport * as yup from 'yup';\n\nexport default class Login extends Component {\n    render() {\n        const schema = yup.object({\n            username: yup.string().required(\"Username is required!\"),\n            password: yup.string().required(\"Password is required!\")\n        });\n        return (\n            <Container>\n                <PageTitle page_title=\"Authentication\"/>\n                <PageDescription page_description=\"Valid usernames: dinosaur, dingo, camel, zebra. The password\n                            is the username + 'password' word. E.g. 'dinosaurpassword'\"/>\n                <Container>\n                    <Row>\n                        <Container className=\"text-center\">\n                            <Formik\n                                validationSchema={schema}\n                                initialValues={{username: \"\", password: \"\"}}\n                                onSubmit={{}}\n                            >\n                                {({\n                                      handleSubmit,\n                                      handleChange,\n                                      handleBlur,\n                                      values,\n                                      touched,\n                                      errors,\n                                  }) => (\n                                    <Form id=\"login-form\" className=\"form\" noValidate onSubmit={handleSubmit}>\n                                        <Form.Group as={Row}>\n                                            <Form.Label className=\"form-label\" column lg={true}\n                                                        htmlFor=\"input-login-username\">Username</Form.Label>\n                                            <Col lg={true}>\n                                                <InputGroup>\n                                                    <InputGroup.Prepend>\n                                                        <InputGroup.Text><FaUser/></InputGroup.Text>\n                                                    </InputGroup.Prepend>\n                                                    <FormControl id=\"input-login-username\" name=\"username\"\n                                                                 placeholder=\"Username\"\n                                                                 className=\"form-control\"\n                                                                 value={values.username}\n                                                                 onChange={handleChange}\n                                                                 onBlur={handleBlur}\n                                                                 isInvalid={!!errors.username && touched.username}\n                                                    />\n                                                    <Form.Control.Feedback type=\"invalid\" className=\"text-left\">\n                                                        {errors.username}\n                                                    </Form.Control.Feedback>\n                                                </InputGroup>\n                                            </Col>\n                                        </Form.Group>\n                                        <Form.Group as={Row} lg={true}>\n                                            <Form.Label className=\"form-label\" column\n                                                        htmlFor=\"input-login-password\">Password</Form.Label>\n                                            <Col lg={true}>\n                                                <InputGroup>\n                                                    <InputGroup.Prepend>\n                                                        <InputGroup.Text><FaKey/></InputGroup.Text>\n                                                    </InputGroup.Prepend>\n                                                    <FormControl id=\"input-login-password\" name=\"password\"\n                                                                 type=\"password\"\n                                                                 placeholder=\"Password\"\n                                                                 value={values.password}\n                                                                 onChange={handleChange}\n                                                                 onBlur={handleBlur}\n                                                                 isInvalid={!!errors.password && touched.password}\n                                                    />\n                                                    <Form.Control.Feedback type=\"invalid\" className=\"text-left\">\n                                                        {errors.password}\n                                                    </Form.Control.Feedback>\n                                                </InputGroup>\n                                            </Col>\n                                        </Form.Group>\n                                        <Form.Group as={Row}>\n                                            <Col lg={true}>&nbsp;</Col>\n                                            <Col className=\"text-left\" lg={true}>\n                                                <Button type=\"submit\"><FaSignInAlt/> Submit</Button>\n                                            </Col>\n                                        </Form.Group>\n                                    </Form>\n                                )}\n                            </Formik>\n                        </Container>\n                    </Row>\n                </Container>\n            </Container>\n        )\n    }\n}","import React, {Component} from 'react';\nimport {Button, Col, Container, Form, FormControl, InputGroup, Row} from 'react-bootstrap';\nimport PageTitle from './page-title'\nimport PageDescription from \"./page-description\";\nimport {FaBirthdayCake, FaEnvelope, FaIdCard, FaMap, FaUnlock, FaUser, FaUserPlus} from \"react-icons/all\";\nimport DatePicker from \"react-datepicker\";\n\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport * as yup from \"yup\";\nimport {Formik} from \"formik\";\n\nexport default class Registration extends Component {\n    state = {\n        startDate: \"\"\n    };\n\n    handleChange = date => {\n        this.setState({\n            startDate: date\n        });\n    };\n\n    render() {\n        const schema = yup.object({\n            username: yup.string().trim()\n                .required(\"Username is required!\")\n                .min(4, \"Minimum of 4 characters is required!\")\n                .max(35, \"Maximum of 35 characters allowed!\")\n                .notOneOf([\"dinosaur\", \"dingo\", \"camel\", \"zebra\"], \"Username is already taken!\"),\n            password: yup.string().trim()\n                .required(\"Password is required!\")\n                .min(8, \"Minimum of 8 characters is required!\"),\n            confirmPassword: yup.string().trim()\n                .oneOf([yup.ref(\"password\"), null], \"Passwords do not match!\"),\n            firstName: yup.string().trim()\n                .min(2, \"Minimum of 2 characters is required!\")\n                .max(35, \"Maximum of 35 characters allowed!\"),\n            lastName: yup.string().trim()\n                .min(2, \"Minimum of 2 characters is required!\")\n                .max(35, \"Maximum of 35 characters allowed!\"),\n            email: yup.string().trim()\n                .email(\"Invalid email address!\")\n                .required(\"Email is required!\"),\n            terms: yup.bool().required(\"You need to accept our T&C!\")\n        });\n\n        return (\n            <Container>\n                <PageTitle page_title=\"Registration\"/>\n                <PageDescription page_description=\"Create a new temporary account. A default session will be created with the successfully created account. The new\n                            account will not be saved, so when the session expires (in 2 minutes), the account will no longer exist.\"/>\n                <Container>\n                    <Row>\n                        <Container className=\"text-center\">\n                            <Formik\n                                validationSchema={schema}\n                                initialValues={{\n                                    username: \"\",\n                                    password: \"\",\n                                    confirmPassword: \"\",\n                                    firstName: \"\",\n                                    lastName: \"\",\n                                    email: \"\",\n                                    terms: \"\"\n                                }}\n                                onSubmit={{}}\n                            >\n                                {({\n                                      handleSubmit,\n                                      handleChange,\n                                      handleBlur,\n                                      values,\n                                      isValid,\n                                      touched,\n                                      errors,\n                                  }) => (\n                                    <Form id=\"registration-form\" className=\"form\" noValidate onSubmit={handleSubmit}>\n                                        <Form.Group as={Row}>\n                                            <Col lg={true}>&nbsp;</Col>\n                                            <Col className=\"text-left\" lg={true}>\n                                                Your login information\n                                            </Col>\n                                        </Form.Group>\n                                        <Form.Group as={Row}>\n                                            <Form.Label className=\"form-label\" column lg={true}\n                                                        htmlFor=\"input-username\">Username</Form.Label>\n                                            <Col lg={true}>\n                                                <InputGroup>\n                                                    <InputGroup.Prepend>\n                                                        <InputGroup.Text><FaUser/></InputGroup.Text>\n                                                    </InputGroup.Prepend>\n                                                    <FormControl id=\"input-username\" name=\"username\"\n                                                                 className=\"form-control\"\n                                                                 value={values.username}\n                                                                 onChange={handleChange}\n                                                                 onBlur={handleBlur}\n                                                                 isInvalid={!!errors.username && touched.username}\n                                                    />\n\n                                                    <Form.Control.Feedback type=\"invalid\" className=\"text-left\">\n                                                        {errors.username}\n                                                    </Form.Control.Feedback>\n                                                </InputGroup>\n                                                <Form.Text className=\"text-left\" muted>\n                                                    4 to 35 letters, numbers or underscore.\n                                                </Form.Text>\n                                            </Col>\n                                        </Form.Group>\n                                        <Form.Group as={Row}>\n                                            <Form.Label className=\"form-label\" column lg={true}\n                                                        htmlFor=\"input-password\">Password</Form.Label>\n                                            <Col lg={true}>\n                                                <InputGroup>\n                                                    <InputGroup.Prepend>\n                                                        <InputGroup.Text><FaUnlock/></InputGroup.Text>\n                                                    </InputGroup.Prepend>\n                                                    <FormControl id=\"input-password\" name=\"password\"\n                                                                 className=\"form-control\"\n                                                                 value={values.password}\n                                                                 onChange={handleChange}\n                                                                 onBlur={handleBlur}\n                                                                 isInvalid={!!errors.password && touched.password}\n                                                    />\n                                                    <Form.Control.Feedback type=\"invalid\" className=\"text-left\">\n                                                        {errors.password}\n                                                    </Form.Control.Feedback>\n                                                </InputGroup>\n                                                <Form.Text className=\"text-left\" muted>\n                                                    Minimum of 8 characters.\n                                                </Form.Text>\n                                            </Col>\n                                        </Form.Group>\n                                        <Form.Group as={Row}>\n                                            <Form.Label className=\"form-label\" column lg={true}\n                                                        htmlFor=\"input-password-confirm\">Confirm password</Form.Label>\n                                            <Col lg={true}>\n                                                <InputGroup>\n                                                    <InputGroup.Prepend>\n                                                        <InputGroup.Text><FaUnlock/></InputGroup.Text>\n                                                    </InputGroup.Prepend>\n                                                    <FormControl id=\"input-password-confirm\" name=\"confirmPassword\"\n                                                                 className=\"form-control\"\n                                                                 value={values.confirmPassword}\n                                                                 onChange={handleChange}\n                                                                 onBlur={handleBlur}\n                                                                 isInvalid={!!errors.confirmPassword && touched.confirmPassword}\n                                                    />\n                                                    <Form.Control.Feedback type=\"invalid\" className=\"text-left\">\n                                                        {errors.confirmPassword}\n                                                    </Form.Control.Feedback>\n                                                </InputGroup>\n                                                <Form.Text className=\"text-left\" muted>\n                                                    Must match the password.\n                                                </Form.Text>\n                                            </Col>\n                                        </Form.Group>\n                                        <Form.Group as={Row}>\n                                            <Col lg={true}>&nbsp;</Col>\n                                            <Col lg={true} className=\"text-left\">\n                                                Some details to get to know you better\n                                            </Col>\n                                        </Form.Group>\n                                        <Form.Group as={Row}>\n                                            <Form.Label className=\"form-label\" column lg={true}\n                                                        htmlFor=\"input-first-name\">Title</Form.Label>\n                                            <Col lg={true} className=\"text-left\">\n                                                <Form.Check type=\"radio\" inline name=\"title\" label=\"Mr\"/>\n                                                <Form.Check type=\"radio\" inline name=\"title\" label=\"Ms\"/>\n                                            </Col>\n                                        </Form.Group>\n                                        <Form.Group as={Row}>\n                                            <Form.Label className=\"form-label\" column lg={true}\n                                                        htmlFor=\"input-first-name\">First name</Form.Label>\n                                            <Col lg={true}>\n                                                <InputGroup>\n                                                    <InputGroup.Prepend>\n                                                        <InputGroup.Text><FaIdCard/></InputGroup.Text>\n                                                    </InputGroup.Prepend>\n                                                    <FormControl id=\"input-first-name\" name=\"firstName\"\n                                                                 className=\"form-control\"\n                                                                 value={values.firstName}\n                                                                 onChange={handleChange}\n                                                                 onBlur={handleBlur}\n                                                                 isInvalid={!!errors.firstName && touched.firstName}\n                                                    />\n                                                    <Form.Control.Feedback type=\"invalid\" className=\"text-left\">\n                                                        {errors.firstName}\n                                                    </Form.Control.Feedback>\n                                                </InputGroup>\n                                                <Form.Text className=\"text-left\" muted>\n                                                    2 to 35 letters and '-' only.\n                                                </Form.Text>\n                                            </Col>\n                                        </Form.Group>\n                                        <Form.Group as={Row}>\n                                            <Form.Label className=\"form-label\" column lg={true}\n                                                        htmlFor=\"input-last-name\">Last name</Form.Label>\n                                            <Col lg={true}>\n                                                <InputGroup>\n                                                    <InputGroup.Prepend>\n                                                        <InputGroup.Text><FaIdCard/></InputGroup.Text>\n                                                    </InputGroup.Prepend>\n                                                    <FormControl id=\"input-last-name\" name=\"lastName\"\n                                                                 className=\"form-control\"\n                                                                 value={values.lastName}\n                                                                 onChange={handleChange}\n                                                                 onBlur={handleBlur}\n                                                                 isInvalid={!!errors.lastName && touched.lastName}\n                                                    />\n                                                    <Form.Control.Feedback type=\"invalid\" className=\"text-left\">\n                                                        {errors.lastName}\n                                                    </Form.Control.Feedback>\n                                                </InputGroup>\n                                                <Form.Text className=\"text-left\" muted>\n                                                    2 to 35 letters and '-' only.\n                                                </Form.Text>\n                                            </Col>\n                                        </Form.Group>\n                                        <Form.Group as={Row}>\n                                            <Form.Label className=\"form-label\" column lg={true}\n                                                        htmlFor=\"input-email\">Email</Form.Label>\n                                            <Col lg={true}>\n                                                <InputGroup>\n                                                    <InputGroup.Prepend>\n                                                        <InputGroup.Text><FaEnvelope/></InputGroup.Text>\n                                                    </InputGroup.Prepend>\n                                                    <FormControl id=\"input-email\" name=\"email\"\n                                                                 className=\"form-control\"\n                                                                 value={values.email}\n                                                                 onChange={handleChange}\n                                                                 onBlur={handleBlur}\n                                                                 isInvalid={!!errors.email && touched.email}\n                                                    />\n                                                    <Form.Control.Feedback type=\"invalid\" className=\"text-left\">\n                                                        {errors.email}\n                                                    </Form.Control.Feedback>\n                                                </InputGroup>\n                                                <Form.Text className=\"text-left\" muted>\n                                                    We promise we won't spam you.\n                                                </Form.Text>\n                                            </Col>\n                                        </Form.Group>\n                                        <Form.Group as={Row}>\n                                            <Form.Label className=\"form-label\" column lg={true}\n                                                        htmlFor=\"input-dob\">Date of birth</Form.Label>\n                                            <Col lg={true}>\n                                                <InputGroup>\n                                                    <InputGroup.Prepend>\n                                                        <InputGroup.Text><FaBirthdayCake/></InputGroup.Text>\n                                                    </InputGroup.Prepend>\n                                                    <DatePicker\n                                                        name=\"dob\"\n                                                        selected={this.state.startDate}\n                                                        onChange={this.handleChange}\n                                                        id=\"input-dob\" className=\"form-control\"/>\n                                                </InputGroup>\n                                            </Col>\n                                        </Form.Group>\n                                        <Form.Group as={Row}>\n                                            <Form.Label className=\"form-label\" column lg={true}\n                                                        htmlFor=\"input-nationality\">Nationality</Form.Label>\n                                            <Col lg={true}>\n                                                <InputGroup>\n                                                    <InputGroup.Prepend>\n                                                        <InputGroup.Text><FaMap/></InputGroup.Text>\n                                                    </InputGroup.Prepend>\n                                                    <FormControl id=\"input-nationality\" as=\"select\" custom\n                                                                 className=\"form-control\">\n                                                        <option value=\"\"></option>\n                                                        <option value=\"Afghan\"> Afghan</option>\n                                                        <option value=\"Albanian\"> Albanian</option>\n                                                        <option value=\"Algerian\"> Algerian</option>\n                                                        <option value=\"American\"> American</option>\n                                                        <option value=\"Andorran\"> Andorran</option>\n                                                        <option value=\"Angolan\"> Angolan</option>\n                                                        <option value=\"Antiguans\"> Antiguans</option>\n                                                        <option value=\"Argentinean\"> Argentinean</option>\n                                                        <option value=\"Armenian\"> Armenian</option>\n                                                        <option value=\"Australian\"> Australian</option>\n                                                        <option value=\"Austrian\"> Austrian</option>\n                                                        <option value=\"Azerbaijani\"> Azerbaijani</option>\n                                                        <option value=\"Bahamian\"> Bahamian</option>\n                                                        <option value=\"Bahraini\"> Bahraini</option>\n                                                        <option value=\"Bangladeshi\"> Bangladeshi</option>\n                                                        <option value=\"Barbadian\"> Barbadian</option>\n                                                        <option value=\"Barbudans\"> Barbudans</option>\n                                                        <option value=\"Batswana\"> Batswana</option>\n                                                        <option value=\"Belarusian\"> Belarusian</option>\n                                                        <option value=\"Belgian\"> Belgian</option>\n                                                        <option value=\"Belizean\"> Belizean</option>\n                                                        <option value=\"Beninese\"> Beninese</option>\n                                                        <option value=\"Bhutanese\"> Bhutanese</option>\n                                                        <option value=\"Bolivian\"> Bolivian</option>\n                                                        <option value=\"Bosnian\"> Bosnian</option>\n                                                        <option value=\"Brazilian\"> Brazilian</option>\n                                                        <option value=\"British\"> British</option>\n                                                        <option value=\"Bruneian\"> Bruneian</option>\n                                                        <option value=\"Bulgarian\"> Bulgarian</option>\n                                                        <option value=\"Burkinabe\"> Burkinabe</option>\n                                                        <option value=\"Burmese\"> Burmese</option>\n                                                        <option value=\"Burundian\"> Burundian</option>\n                                                        <option value=\"Cambodian\"> Cambodian</option>\n                                                        <option value=\"Cameroonian\"> Cameroonian</option>\n                                                        <option value=\"Canadian\"> Canadian</option>\n                                                        <option value=\"Cape Verdean\"> Cape Verdean</option>\n                                                        <option value=\"Central African\"> Central African</option>\n                                                        <option value=\"Chadian\"> Chadian</option>\n                                                        <option value=\"Chilean\"> Chilean</option>\n                                                        <option value=\"Chinese\"> Chinese</option>\n                                                        <option value=\"Colombian\"> Colombian</option>\n                                                        <option value=\"Comoran\"> Comoran</option>\n                                                        <option value=\"Congolese\"> Congolese</option>\n                                                        <option value=\"Congolese\"> Congolese</option>\n                                                        <option value=\"Costa Rican\"> Costa Rican</option>\n                                                        <option value=\"Croatian\"> Croatian</option>\n                                                        <option value=\"Cuban\"> Cuban</option>\n                                                        <option value=\"Cypriot\"> Cypriot</option>\n                                                        <option value=\"Czech\"> Czech</option>\n                                                        <option value=\"Danish\"> Danish</option>\n                                                        <option value=\"Djibouti\"> Djibouti</option>\n                                                        <option value=\"Dominican\"> Dominican</option>\n                                                        <option value=\"Dominican\"> Dominican</option>\n                                                        <option value=\"Dutch\"> Dutch</option>\n                                                        <option value=\"Dutchman\"> Dutchman</option>\n                                                        <option value=\"Dutchwoman\"> Dutchwoman</option>\n                                                        <option value=\"East Timorese\"> East Timorese</option>\n                                                        <option value=\"Ecuadorean\"> Ecuadorean</option>\n                                                        <option value=\"Egyptian\"> Egyptian</option>\n                                                        <option value=\"Emirian\"> Emirian</option>\n                                                        <option value=\"Equatorial Guinean\"> Equatorial Guinean</option>\n                                                        <option value=\"Eritrean\"> Eritrean</option>\n                                                        <option value=\"Estonian\"> Estonian</option>\n                                                        <option value=\"Ethiopian\"> Ethiopian</option>\n                                                        <option value=\"Fijian\"> Fijian</option>\n                                                        <option value=\"Filipino\"> Filipino</option>\n                                                        <option value=\"Finnish\"> Finnish</option>\n                                                        <option value=\"French\"> French</option>\n                                                        <option value=\"Gabonese\"> Gabonese</option>\n                                                        <option value=\"Gambian\"> Gambian</option>\n                                                        <option value=\"Georgian\"> Georgian</option>\n                                                        <option value=\"German\"> German</option>\n                                                        <option value=\"Ghanaian\"> Ghanaian</option>\n                                                        <option value=\"Greek\"> Greek</option>\n                                                        <option value=\"Grenadian\"> Grenadian</option>\n                                                        <option value=\"Guatemalan\"> Guatemalan</option>\n                                                        <option value=\"Guinea-Bissauan\"> Guinea-Bissauan</option>\n                                                        <option value=\"Guinean\"> Guinean</option>\n                                                        <option value=\"Guyanese\"> Guyanese</option>\n                                                        <option value=\"Haitian\"> Haitian</option>\n                                                        <option value=\"Herzegovinian\"> Herzegovinian</option>\n                                                        <option value=\"Honduran\"> Honduran</option>\n                                                        <option value=\"Hungarian\"> Hungarian</option>\n                                                        <option value=\"I-Kiribati\"> I-Kiribati</option>\n                                                        <option value=\"Icelander\"> Icelander</option>\n                                                        <option value=\"Indian\"> Indian</option>\n                                                        <option value=\"Indonesian\"> Indonesian</option>\n                                                        <option value=\"Iranian\"> Iranian</option>\n                                                        <option value=\"Iraqi\"> Iraqi</option>\n                                                        <option value=\"Irish\"> Irish</option>\n                                                        <option value=\"Irish\"> Irish</option>\n                                                        <option value=\"Israeli\"> Israeli</option>\n                                                        <option value=\"Italian\"> Italian</option>\n                                                        <option value=\"Ivorian\"> Ivorian</option>\n                                                        <option value=\"Jamaican\"> Jamaican</option>\n                                                        <option value=\"Japanese\"> Japanese</option>\n                                                        <option value=\"Jordanian\"> Jordanian</option>\n                                                        <option value=\"Kazakhstani\"> Kazakhstani</option>\n                                                        <option value=\"Kenyan\"> Kenyan</option>\n                                                        <option value=\"Kittian and Nevisian\"> Kittian and Nevisian\n                                                        </option>\n                                                        <option value=\"Kuwaiti\"> Kuwaiti</option>\n                                                        <option value=\"Kyrgyz\"> Kyrgyz</option>\n                                                        <option value=\"Laotian\"> Laotian</option>\n                                                        <option value=\"Latvian\"> Latvian</option>\n                                                        <option value=\"Lebanese\"> Lebanese</option>\n                                                        <option value=\"Liberian\"> Liberian</option>\n                                                        <option value=\"Libyan\"> Libyan</option>\n                                                        <option value=\"Liechtensteiner\"> Liechtensteiner</option>\n                                                        <option value=\"Lithuanian\"> Lithuanian</option>\n                                                        <option value=\"Luxembourger\"> Luxembourger</option>\n                                                        <option value=\"Macedonian\"> Macedonian</option>\n                                                        <option value=\"Malagasy\"> Malagasy</option>\n                                                        <option value=\"Malawian\"> Malawian</option>\n                                                        <option value=\"Malaysian\"> Malaysian</option>\n                                                        <option value=\"Maldivan\"> Maldivan</option>\n                                                        <option value=\"Malian\"> Malian</option>\n                                                        <option value=\"Maltese\"> Maltese</option>\n                                                        <option value=\"Marshallese\"> Marshallese</option>\n                                                        <option value=\"Mauritanian\"> Mauritanian</option>\n                                                        <option value=\"Mauritian\"> Mauritian</option>\n                                                        <option value=\"Mexican\"> Mexican</option>\n                                                        <option value=\"Micronesian\"> Micronesian</option>\n                                                        <option value=\"Moldovan\"> Moldovan</option>\n                                                        <option value=\"Monacan\"> Monacan</option>\n                                                        <option value=\"Mongolian\"> Mongolian</option>\n                                                        <option value=\"Moroccan\"> Moroccan</option>\n                                                        <option value=\"Mosotho\"> Mosotho</option>\n                                                        <option value=\"Motswana\"> Motswana</option>\n                                                        <option value=\"Mozambican\"> Mozambican</option>\n                                                        <option value=\"Namibian\"> Namibian</option>\n                                                        <option value=\"Nauruan\"> Nauruan</option>\n                                                        <option value=\"Nepalese\"> Nepalese</option>\n                                                        <option value=\"Netherlander\"> Netherlander</option>\n                                                        <option value=\"New Zealander\"> New Zealander</option>\n                                                        <option value=\"Ni-Vanuatu\"> Ni-Vanuatu</option>\n                                                        <option value=\"Nicaraguan\"> Nicaraguan</option>\n                                                        <option value=\"Nigerian\"> Nigerian</option>\n                                                        <option value=\"Nigerien\"> Nigerien</option>\n                                                        <option value=\"North Korean\"> North Korean</option>\n                                                        <option value=\"Northern Irish\"> Northern Irish</option>\n                                                        <option value=\"Norwegian\"> Norwegian</option>\n                                                        <option value=\"Omani\"> Omani</option>\n                                                        <option value=\"Pakistani\"> Pakistani</option>\n                                                        <option value=\"Palauan\"> Palauan</option>\n                                                        <option value=\"Panamanian\"> Panamanian</option>\n                                                        <option value=\"Papua New Guinean\"> Papua New Guinean</option>\n                                                        <option value=\"Paraguayan\"> Paraguayan</option>\n                                                        <option value=\"Peruvian\"> Peruvian</option>\n                                                        <option value=\"Polish\"> Polish</option>\n                                                        <option value=\"Portuguese\"> Portuguese</option>\n                                                        <option value=\"Qatari\"> Qatari</option>\n                                                        <option value=\"Romanian\"> Romanian</option>\n                                                        <option value=\"Russian\"> Russian</option>\n                                                        <option value=\"Rwandan\"> Rwandan</option>\n                                                        <option value=\"Saint Lucian\"> Saint Lucian</option>\n                                                        <option value=\"Salvadoran\"> Salvadoran</option>\n                                                        <option value=\"Samoan\"> Samoan</option>\n                                                        <option value=\"San Marinese\"> San Marinese</option>\n                                                        <option value=\"Sao Tomean\"> Sao Tomean</option>\n                                                        <option value=\"Saudi\"> Saudi</option>\n                                                        <option value=\"Scottish\"> Scottish</option>\n                                                        <option value=\"Senegalese\"> Senegalese</option>\n                                                        <option value=\"Serbian\"> Serbian</option>\n                                                        <option value=\"Seychellois\"> Seychellois</option>\n                                                        <option value=\"Sierra Leonean\"> Sierra Leonean</option>\n                                                        <option value=\"Singaporean\"> Singaporean</option>\n                                                        <option value=\"Slovakian\"> Slovakian</option>\n                                                        <option value=\"Slovenian\"> Slovenian</option>\n                                                        <option value=\"Solomon Islander\"> Solomon Islander</option>\n                                                        <option value=\"Somali\"> Somali</option>\n                                                        <option value=\"South African\"> South African</option>\n                                                        <option value=\"South Korean\"> South Korean</option>\n                                                        <option value=\"Spanish\"> Spanish</option>\n                                                        <option value=\"Sri Lankan\"> Sri Lankan</option>\n                                                        <option value=\"Sudanese\"> Sudanese</option>\n                                                        <option value=\"Surinamer\"> Surinamer</option>\n                                                        <option value=\"Swazi\"> Swazi</option>\n                                                        <option value=\"Swedish\"> Swedish</option>\n                                                        <option value=\"Swiss\"> Swiss</option>\n                                                        <option value=\"Syrian\"> Syrian</option>\n                                                        <option value=\"Taiwanese\"> Taiwanese</option>\n                                                        <option value=\"Tajik\"> Tajik</option>\n                                                        <option value=\"Tanzanian\"> Tanzanian</option>\n                                                        <option value=\"Thai\"> Thai</option>\n                                                        <option value=\"Togolese\"> Togolese</option>\n                                                        <option value=\"Tongan\"> Tongan</option>\n                                                        <option value=\"Trinidadian or Tobagonian\"> Trinidadian or\n                                                            Tobagonian\n                                                        </option>\n                                                        <option value=\"Tunisian\"> Tunisian</option>\n                                                        <option value=\"Turkish\"> Turkish</option>\n                                                        <option value=\"Tuvaluan\"> Tuvaluan</option>\n                                                        <option value=\"Ugandan\"> Ugandan</option>\n                                                        <option value=\"Ukrainian\"> Ukrainian</option>\n                                                        <option value=\"Uruguayan\"> Uruguayan</option>\n                                                        <option value=\"Uzbekistani\"> Uzbekistani</option>\n                                                        <option value=\"Venezuelan\"> Venezuelan</option>\n                                                        <option value=\"Vietnamese\"> Vietnamese</option>\n                                                        <option value=\"Welsh\"> Welsh</option>\n                                                        <option value=\"Welsh\"> Welsh</option>\n                                                        <option value=\"Yemenite\"> Yemenite</option>\n                                                        <option value=\"Zambian\"> Zambian</option>\n                                                        <option value=\"Zimbabwean\"> Zimbabwean</option>\n                                                    </FormControl>\n                                                </InputGroup>\n                                            </Col>\n                                        </Form.Group>\n                                        <Form.Group as={Row}>\n                                            <Col lg={true}>&nbsp;</Col>\n                                            <Col lg={true} className=\"text-left\">\n                                                <Form.Check type=\"checkbox\" id=\"terms\" name=\"terms\"\n                                                            label=\"I accept the terms and conditions\"\n                                                            value={values.terms}\n                                                            onChange={handleChange}\n                                                            onBlur={handleBlur}\n                                                            isInvalid={!!errors.terms && touched.terms}\n                                                            feedback={errors.terms}\n                                                />\n                                            </Col>\n                                        </Form.Group>\n                                        <Form.Group as={Row}>\n                                            <Col lg={true}>&nbsp;</Col>\n                                            <Col lg={true} className=\"text-left\">\n                                                <Button type=\"submit\"><FaUserPlus/> Submit your registration</Button>\n                                            </Col>\n                                        </Form.Group>\n                                    </Form>\n                                )}\n                            </Formik>\n                        </Container>\n                    </Row>\n                </Container>\n            </Container>\n        )\n    }\n}","import React, {Component} from 'react';\nimport './App.css';\nimport {Container} from 'react-bootstrap';\nimport {HashRouter, Route, Switch} from 'react-router-dom';\nimport SideNav from './components/side-nav'\nimport Home from './components/home'\nimport Notfound from './components/notfound'\nimport Cookie from './components/cookie'\nimport Alert from './components/alert'\nimport Hover from './components/hover'\nimport Order from './components/order'\nimport Swipe from './components/swipe'\nimport Slider from './components/slider'\nimport Stale from './components/stale'\nimport Interceptor from './components/interceptor'\nimport Welcome from './components/welcome'\nimport Wait from './components/wait'\nimport ModalPopup from './components/modalPopup'\nimport Login from \"./components/login\";\nimport Registration from \"./components/registration\";\n\nexport default class App extends Component {\n    render() {\n        return (\n            <Container fluid>\n                <SideNav/>\n                <div className=\"content\">\n                    <HashRouter basename='/web-stubs'>\n                        <Switch>\n                            <Route exact path={'/'} component={Home}/>\n                            <Route path={'/login'} component={Login}/>\n                            <Route path={'/registration'} component={Registration}/>\n                            <Route path={'/cookie'} component={Cookie}/>\n                            <Route path={'/alert'} component={Alert}/>\n                            <Route path={'/hover'} component={Hover}/>\n                            <Route path={'/order'} component={Order}/>\n                            <Route path={'/select'} component={Swipe}/>\n                            <Route path={'/slider'} component={Slider}/>\n                            <Route path={'/swipe'} component={Swipe}/>\n                            <Route path={'/stale'} component={Stale}/>\n                            <Route path={'/interceptor'} component={Interceptor}/>\n                            <Route path={'/welcome'} component={Welcome}/>\n                            <Route path={'/wait'} component={Wait}/>\n                            <Route path={'/modal'} component={ModalPopup}/>\n                            <Route component={Notfound}/>\n                        </Switch>\n                    </HashRouter>\n                </div>\n            </Container>\n        )\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}